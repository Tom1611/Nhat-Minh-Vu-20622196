{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOAU33hdN2BeD1pyTQWM6d5",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Tom1611/Nhat-Minh-Vu-20622196/blob/main/NhatMinhVu's%20reflection\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "L7bKuMeDdgT2"
      },
      "outputs": [],
      "source": [
        "Project Reflection\n",
        "AI Tools Used\n",
        "For the WeatherWise project, I mainly used ChatGPT as my AI platform throughout the entire development process. It wasn’t just aiding in sorting out bugs, it actively helped me design, refine, and think through both the front and back end. The original draft in the “Weather code.docx” file was my own workings of the logic structure, where I planned each function and interaction (such as get_location_method(), create_visualisations(), including the menu-driven interface). From there, I worked with ChatGPT to translate, piece by piece, into clean, working Python code inside Colab. The AI helped troubleshoot and correct any syntax issues encountered, guided me in organizing my functions, and improved the visualization of the weather data with Matplotlib and ipywidgets. It also helped me understand some of the challenging parts, like managing the state between functions and ensuring the OpenWeatherMap API key stayed secure.\n",
        "\n",
        "Prompting Techniques\n",
        "I learned that the way I prompt AI completely changes the output quality. At the beginning, my prompts were short and vague, which resulted in unclear or broad and resulted in responses far off track. Then, I started providing detailed context, like “assume I’m building a modular weather app with interactive widgets. Keep the code logic but improve readability.” This extra context and clarity let ChatGPT refine my code without completing overriding  my original work. I used incremental prompting, asking small, specific things (“why are my plots doubling up?” or “how can I make this easier for an everyday user?”). I also included screenshots from my Weather code.docx plan, letting AI build on my own logic rather than starting from scratch. This back-and-forth dialogue taught me how to use AI as a collaborative partner, not as a coding-machine.\n",
        "\n",
        "What Worked Well\n",
        "I’m genuinely proud of how my user interface turned out. Using ipywidgets, I created a easy-to-use menu-driven experience where users can:\n",
        "Select between viewing current weather, seeing forecasts, or asking a question about conditions\n",
        "Either Input or select their city from a map\n",
        "Choose Celsius or Fahrenheit preferences interactively\n",
        "\n",
        "The use of dropdowns, buttons, and live outputs made it feel like a real app prototype, not just an unresponsive script. The visualisations also felt production-ready with the temperature line chart and precipitation bar chart now render cleanly without duplicating, thanks to fixing the redundant plt.show() calls.\n",
        "\n",
        "\n",
        "What impressed me most was how the interface combined both function and ease of use. ChatGPT helped me design it in a way to be simple yet informative, in line with the principles of modern UX design. Every time a user clicks “See Forecast,” the screen refreshes smoothly, presenting charts that load seamlessly.\n",
        "\n",
        "What Would You Do Differently?\n",
        "If I had more time, I’d include a live dashboard in the interface, possibly with dynamic weather tiles and icons. I’d also include a chatbot panel that uses AI to simplify the meteorological terminology into everyday, understandable language (e.g., “humidity means the amount of water vapor in the air”). I’d also want to improve accessibility on a variety of devices, ensuring the layout adapts to various screen sizes without compromising or losing content.\n",
        "\n",
        "Final Thoughts\n",
        "This project made me realise that AI-assisted coding isn’t about bypassing learning how to code. It’s about accelerating the understanding of code. I didn’t just build a weather app; I learned how data flows through user input, APIs, and interactive components. Every part of code in the WeatherWise system, from my docx draft to the final working notebook, symbolizes the process of design thinking and trial and error; all guided by AI.\n",
        " Working with ChatGPT pushed me to think more like a developer who understands why something works, not just how to make it run.\n",
        "\n"
      ]
    }
  ]
}